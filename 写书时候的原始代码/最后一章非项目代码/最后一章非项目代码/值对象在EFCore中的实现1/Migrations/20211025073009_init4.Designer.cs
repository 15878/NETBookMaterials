// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using 值对象在EFCore中的实现1;

#nullable disable

namespace 值对象在EFCore中的实现1.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20211025073009_init4")]
    partial class init4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("值对象在EFCore中的实现1.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<long?>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("值对象在EFCore中的实现1.Region", b =>
                {
                    b.OwnsOne("值对象在EFCore中的实现1.Area", "Area", b1 =>
                        {
                            b1.Property<long>("RegionId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Unit")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("int");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.HasKey("RegionId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("RegionId");
                        });

                    b.OwnsOne("值对象在EFCore中的实现1.Geo", "Location", b1 =>
                        {
                            b1.Property<long>("RegionId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("RegionId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("RegionId");
                        });

                    b.OwnsOne("值对象在EFCore中的实现1.MultilingualString", "Name", b1 =>
                        {
                            b1.Property<long>("RegionId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Chinese")
                                .IsRequired()
                                .HasMaxLength(20)
                                .IsUnicode(true)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("English")
                                .HasMaxLength(20)
                                .IsUnicode(false)
                                .HasColumnType("varchar(20)");

                            b1.HasKey("RegionId");

                            b1.ToTable("Cities");

                            b1.WithOwner()
                                .HasForeignKey("RegionId");
                        });

                    b.Navigation("Area")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
